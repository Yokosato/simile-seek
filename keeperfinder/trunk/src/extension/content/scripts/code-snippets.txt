var file = Components.classes["@mozilla.org/file/directory_service;1"]
                     .getService(Components.interfaces.nsIProperties)
                     .get("ProfD", Components.interfaces.nsIFile);
file.append("foo.sqlite");

var storageService = Components.classes["@mozilla.org/storage/service;1"]
                        .getService(Components.interfaces.mozIStorageService);
var mDBConn = storageService.openDatabase(file);
KeeperFinder.log(mDBConn);


    /*
    var filterService = Components.classes["@mozilla.org/messenger/services/filters;1"].
        getService(Components.interfaces.nsIMsgFilterService);
        
    var folders = Components.classes["@mozilla.org/supports-array;1"].
        createInstance(Components.interfaces.nsISupportsArray);
    folders.AppendElement(KeeperFinder._selectedFolder);
    
    var tempFilterList = filterService.getTempFilterList(KeeperFinder._selectedFolder);
    tempFilterList.insertFilterAt(0, new KeeperFinder.MsgFilter(tempFilterList, items));
    
    KeeperFinder.log("here0");
    filterService.applyFiltersToFolders(tempFilterList, folders, msgWindow);
    
    KeeperFinder.log("here1");
    */
    

KeeperFinder.MsgFilter = function(filterList, items) {
    this.filterList = filterList;
    this._items = items;
    this.wrappedJSObject = this;
};

KeeperFinder.MsgFilter.prototype = {
    QueryInterface: function(iid) {
        if (iid.equals(Components.interfaces.nsIMsgFilter) ||
            iid.equals(Components.interfaces.nsISupports)) {
            return this;
        }
        throw Components.interfaces.NS_ERROR_NOINTERFACE;
    },
    
    //filterType:             null,
    get filterType() { KeeperFinder.log("filterType"); return null },
    temporary:              false,
    enabled:                true,
    filterName:             "keeperFinder",
    filterDesc:             "KeeperFinder faceted browsing filter",
    unparsedBuffer:         "",
    unparseable:            false,
    
    AddTerm:                function(attrib, op, value, and, arbitraryHeader) {KeeperFinder.log("AddTerm");},
    GetTerm:                function(termIndex) { KeeperFinder.log("GetTerm"); return null; },
    appendTerm:             function(term) { KeeperFinder.log("appendTerm"); },
    createTerm:             function() { KeeperFinder.log("createTerm"); return null; },
    //searchTerms:            null,
    get searchTerms() { KeeperFinder.log("searchTerms"); return null },
    //scope:                  null,
    get scope() { KeeperFinder.log("scope"); return null },
    
    MatchHdr: function(msgHdr, folder, db, headers, headerSize) { KeeperFinder.log("MatchHdr"); return this._items.contains(msgHdr.messageId); },
    logRuleHit: function(aFilterAction, aHeader) { KeeperFinder.log("logRuleHit"); },
    
    createAction:           function() { KeeperFinder.log("createAction"); return null; },
    getActionAt:            function(index) { KeeperFinder.log("getActionAt"); return null; },
    appendAction:           function(action) { KeeperFinder.log("appendAction"); },
    clearActionList:        function() {KeeperFinder.log("clearActionList");},
    getSortedActionList:    function(actionList) {KeeperFinder.log("getSortedActionList");},
    //actionList:             null
    get actionList() { KeeperFinder.log("actionList"); return null }
};

